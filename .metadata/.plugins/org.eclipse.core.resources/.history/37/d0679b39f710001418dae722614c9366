package com.convertor.service;

import org.orm.PersistentException;
import org.orm.PersistentTransaction;

import cst_dom.Cst_temperatura;
import cst_dom.Cst_tipo_consulta;
import cst_dom.Cst_usuario;

public class TemperatureConvertorService {
	
	public final Double convertTemperature(Double temperature, Integer codConversion, String login, String password) throws PersistentException{
		
		PersistentTransaction t = cst_dom.UntitledPersistentManager.instance().getSession().beginTransaction();
		try {
			Double finalValue = null;
			Integer idUser = logUser(login, password);
			if(idUser!=null){
				cst_dom.Cst_temperatura selectedConversion = new Cst_temperatura();
				if(temperature!=null && codConversion!=null){			
					cst_dom.Cst_temperatura[] cst_domCst_temperaturas = cst_dom.Cst_temperaturaDAO.listCst_temperaturaByQuery(null, null);
					if(cst_domCst_temperaturas!=null && cst_domCst_temperaturas.length>0){
						for(cst_dom.Cst_temperatura temperatura : cst_domCst_temperaturas){
							if(temperatura.getKey()==codConversion.doubleValue()){
								selectedConversion = temperatura;
								break;
							}
						}
						finalValue = selectedConversion.getConversion()*temperature;
						
						cst_dom.Cst_tipo_consulta consulta = new Cst_tipo_consulta();
						cst_dom.Cst_tipo_consulta[] cst_domCst_tipo_consultas = cst_dom.Cst_tipo_consultaDAO.listCst_tipo_consultaByQuery(null, null);
						for(cst_dom.Cst_tipo_consulta tipoConsulta : cst_domCst_tipo_consultas){
							if(tipoConsulta.getIdTipoConsulta()==1){
								consulta = tipoConsulta;
								break;
							}
						}
						cst_dom.Cst_usuario usuarioLog = new Cst_usuario();
						cst_dom.Cst_usuario[] cst_domCst_usuarios = cst_dom.Cst_usuarioDAO.listCst_usuarioByQuery(null, null);
						for(cst_dom.Cst_usuario usuario : cst_domCst_usuarios){
							
						}
						
						cst_dom.Cst_historico lcst_domCst_historico = cst_dom.Cst_historicoDAO.createCst_historico();
						
						
						
						lcst_domCst_historico.setCst_tipo_consultaidTipoConsulta(consulta);
						lcst_domCst_historico.setCst_usuarioidUsuario(value);
						cst_dom.Cst_historicoDAO.save(lcst_domCst_historico);
						t.commit();
					}	
				}
			}		
		}
		catch (Exception e) {
			t.rollback();
		}
		
		return finalValue;
	}

	public final Integer logUser(String user, String password) throws PersistentException{
		
		Integer userLogId = null;
		cst_dom.Cst_usuario[] cst_domCst_usuarios = cst_dom.Cst_usuarioDAO.listCst_usuarioByQuery(null, null);
		for(cst_dom.Cst_usuario usuario : cst_domCst_usuarios){
			if(usuario.getUser()==user && usuario.getPassword()==password){
				userLogId = usuario.getIdUsuario();
				break;
			}
		}
		return userLogId;		
	}
	
	

}
